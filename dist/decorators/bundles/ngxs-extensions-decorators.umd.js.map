{"version":3,"file":"ngxs-extensions-decorators.umd.js","sources":["../../../src/lib/core/internal/injector-accessor.service.ts","../../../src/lib/decorators.module.ts","../../../src/lib/core/internal/utils.ts","../../../src/lib/core/decorators/reset-state.decorator.ts","../../../src/ngxs-extensions-decorators.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class InjectorAccessorService {\r\n  private static injector: Injector | null = null;\r\n\r\n  constructor(injector: Injector) {\r\n    InjectorAccessorService.injector = injector;\r\n  }\r\n\r\n  public static getInjector(): never | Injector {\r\n    if (this.injector === null) {\r\n      throw new Error('\"NgxsExtensionsDecoratorsModule\" is not imported.');\r\n    }\r\n\r\n    return this.injector;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Self } from '@angular/core';\r\nimport { InjectorAccessorService } from './core/internal/injector-accessor.service';\r\n\r\n@NgModule()\r\nexport class NgxsExtensionsDecoratorsModule {\r\n  constructor(@Self() private injectorAccessorService: InjectorAccessorService) {}\r\n\r\n  public static forRoot(): ModuleWithProviders<NgxsExtensionsDecoratorsModule> {\r\n    return {\r\n      ngModule: NgxsExtensionsDecoratorsModule,\r\n      providers: [InjectorAccessorService],\r\n    };\r\n  }\r\n}\r\n","/** Used to generate unique IDs. */\r\nconst idCounter = {};\r\n\r\n/**\r\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\r\n *\r\n * @param prefix The value to prefix the ID with.\r\n * @returns Returns the unique ID.\r\n * @example\r\n *\r\n * uniqueId('contact_')\r\n * // => 'contact_104'\r\n *\r\n * uniqueId()\r\n * // => '105'\r\n */\r\nexport function uniqueId(prefix = '$ids$'): string {\r\n  if (!idCounter[prefix]) {\r\n    idCounter[prefix] = 0;\r\n  }\r\n\r\n  const id = ++idCounter[prefix];\r\n  if (prefix === '$ids$') {\r\n    return `${id}`;\r\n  }\r\n\r\n  return `${prefix + id}`;\r\n}\r\n","import { ensureStoreMetadata, StateContext, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { InjectorAccessorService } from '../internal/injector-accessor.service';\r\nimport { uniqueId } from '../internal/utils';\r\n\r\n/**\r\n * Decorator to reset state to default on method call.\r\n *\r\n * @param stateClass state to get defaults from\r\n */\r\nexport function ResetStateToDefault(stateClass: any) {\r\n  return function(target: any, key: string, descriptor: TypedPropertyDescriptor<any>) {\r\n    // create meta data\r\n    const id = uniqueId();\r\n    const fn = `resetAction${id}`;\r\n    const type = `[${stateClass.name}] ResetAction-${id}`;\r\n    const meta = ensureStoreMetadata(stateClass);\r\n\r\n    if (meta.actions.hasOwnProperty(type)) {\r\n      throw new Error(`Method decorated with such type \\`${type}\\` already exists`);\r\n    }\r\n\r\n    // set action handler on state class\r\n    stateClass.prototype[fn] = ({ setState }: StateContext<any>) => {\r\n      setState(meta.defaults);\r\n    };\r\n\r\n    // set meta data\r\n    meta.actions[type] = [\r\n      {\r\n        fn,\r\n        options: {},\r\n        type,\r\n      },\r\n    ];\r\n\r\n    // wrap original function to call dispatch after method has finished\r\n    const original: Function = descriptor.value;\r\n    function dispatch() {\r\n      InjectorAccessorService.getInjector()\r\n        .get<Store>(Store)\r\n        .dispatch({ type });\r\n    }\r\n    function wrapper(this: any, ...args: any[]) {\r\n      const result = original.apply(this, args);\r\n      // handle observable\r\n      if (result instanceof Observable) {\r\n        result.toPromise().then(dispatch);\r\n        return result;\r\n      }\r\n      // handle promise\r\n      if (result instanceof Promise) {\r\n        return result.then(dispatch);\r\n      }\r\n      // handle sync call\r\n      dispatch();\r\n      return result;\r\n    }\r\n    descriptor.value = wrapper;\r\n\r\n    // return descriptor\r\n    return descriptor;\r\n  };\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0","Injectable","i1.InjectorAccessorService","NgModule","Self","ensureStoreMetadata","Store","Observable"],"mappings":"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"}