{"version":3,"file":"ngxs-extensions-decorators.js","sources":["../../../src/lib/core/internal/injector-accessor.service.ts","../../../src/lib/decorators.module.ts","../../../src/lib/core/internal/utils.ts","../../../src/lib/core/decorators/reset-state.decorator.ts","../../../src/ngxs-extensions-decorators.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class InjectorAccessorService {\r\n  private static injector: Injector | null = null;\r\n\r\n  constructor(injector: Injector) {\r\n    InjectorAccessorService.injector = injector;\r\n  }\r\n\r\n  public static getInjector(): never | Injector {\r\n    if (this.injector === null) {\r\n      throw new Error('\"NgxsExtensionsDecoratorsModule\" is not imported.');\r\n    }\r\n\r\n    return this.injector;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule, Self } from '@angular/core';\r\nimport { InjectorAccessorService } from './core/internal/injector-accessor.service';\r\n\r\n@NgModule()\r\nexport class NgxsExtensionsDecoratorsModule {\r\n  constructor(@Self() private injectorAccessorService: InjectorAccessorService) {}\r\n\r\n  public static forRoot(): ModuleWithProviders<NgxsExtensionsDecoratorsModule> {\r\n    return {\r\n      ngModule: NgxsExtensionsDecoratorsModule,\r\n      providers: [InjectorAccessorService],\r\n    };\r\n  }\r\n}\r\n","/** Used to generate unique IDs. */\r\nconst idCounter = {};\r\n\r\n/**\r\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\r\n *\r\n * @param prefix The value to prefix the ID with.\r\n * @returns Returns the unique ID.\r\n * @example\r\n *\r\n * uniqueId('contact_')\r\n * // => 'contact_104'\r\n *\r\n * uniqueId()\r\n * // => '105'\r\n */\r\nexport function uniqueId(prefix = '$ids$'): string {\r\n  if (!idCounter[prefix]) {\r\n    idCounter[prefix] = 0;\r\n  }\r\n\r\n  const id = ++idCounter[prefix];\r\n  if (prefix === '$ids$') {\r\n    return `${id}`;\r\n  }\r\n\r\n  return `${prefix + id}`;\r\n}\r\n","import { ensureStoreMetadata, StateContext, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { InjectorAccessorService } from '../internal/injector-accessor.service';\r\nimport { uniqueId } from '../internal/utils';\r\n\r\n/**\r\n * Decorator to reset state to default on method call.\r\n *\r\n * @param stateClass state to get defaults from\r\n */\r\nexport function ResetStateToDefault(stateClass: any) {\r\n  return function(target: any, key: string, descriptor: TypedPropertyDescriptor<any>) {\r\n    // create meta data\r\n    const id = uniqueId();\r\n    const fn = `resetAction${id}`;\r\n    const type = `[${stateClass.name}] ResetAction-${id}`;\r\n    const meta = ensureStoreMetadata(stateClass);\r\n\r\n    if (meta.actions.hasOwnProperty(type)) {\r\n      throw new Error(`Method decorated with such type \\`${type}\\` already exists`);\r\n    }\r\n\r\n    // set action handler on state class\r\n    stateClass.prototype[fn] = ({ setState }: StateContext<any>) => {\r\n      setState(meta.defaults);\r\n    };\r\n\r\n    // set meta data\r\n    meta.actions[type] = [\r\n      {\r\n        fn,\r\n        options: {},\r\n        type,\r\n      },\r\n    ];\r\n\r\n    // wrap original function to call dispatch after method has finished\r\n    const original: Function = descriptor.value;\r\n    function dispatch() {\r\n      InjectorAccessorService.getInjector()\r\n        .get<Store>(Store)\r\n        .dispatch({ type });\r\n    }\r\n    function wrapper(this: any, ...args: any[]) {\r\n      const result = original.apply(this, args);\r\n      // handle observable\r\n      if (result instanceof Observable) {\r\n        result.toPromise().then(dispatch);\r\n        return result;\r\n      }\r\n      // handle promise\r\n      if (result instanceof Promise) {\r\n        return result.then(dispatch);\r\n      }\r\n      // handle sync call\r\n      dispatch();\r\n      return result;\r\n    }\r\n    descriptor.value = wrapper;\r\n\r\n    // return descriptor\r\n    return descriptor;\r\n  };\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.InjectorAccessorService"],"mappings":"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"}